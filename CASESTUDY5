import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Force TensorFlow to use CPU only
tf.config.set_visible_devices([], 'GPU')

# ----------------------------------------------------------------------
# STEP 1: CREATE XOR DATASET
# ----------------------------------------------------------------------
# Inputs: binary combinations for XOR
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

# XOR Output
y = np.array([[0],
              [1],
              [1],
              [0]])

# ----------------------------------------------------------------------
# STEP 2: BUILD MLP MODEL
# ----------------------------------------------------------------------
model = Sequential([
    Dense(4, input_dim=2, activation='relu'),  # Hidden layer with 4 neurons
    Dense(1, activation='sigmoid')             # Output layer
])

# ----------------------------------------------------------------------
# STEP 3: COMPILE MODEL
# ----------------------------------------------------------------------
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# ----------------------------------------------------------------------
# STEP 4: TRAIN MODEL
# ----------------------------------------------------------------------
print("Training XOR MLP model...")
model.fit(X, y, epochs=5000, verbose=0)
print("Training completed âœ…\n")

# ----------------------------------------------------------------------
# STEP 5: TEST MODEL
# ----------------------------------------------------------------------
predictions = model.predict(X)
predictions = np.round(predictions).astype(int)

print("XOR Inputs:")
print(X)
print("\nPredicted XOR Outputs:")
print(predictions)
print("\nActual XOR Outputs:")
print(y)

# ----------------------------------------------------------------------
# STEP 6: OPTIONAL: VISUALIZE DECISION BOUNDARY
# ----------------------------------------------------------------------
try:
    import matplotlib.pyplot as plt

    h = 0.01
    x_min, x_max = X[:, 0].min() - 0.5, X[:, 0].max() + 0.5
    y_min, y_max = X[:, 1].min() - 0.5, X[:, 1].max() + 0.5
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))

    grid = np.c_[xx.ravel(), yy.ravel()]
    Z = model.predict(grid)
    Z = np.round(Z).reshape(xx.shape)

    plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.Paired)
    plt.scatter(X[:, 0], X[:, 1], c=y.flatten(), s=100, edgecolors='k', cmap=plt.cm.Paired)
    plt.title("XOR MLP Decision Boundary")
    plt.xlabel("Input 1")
    plt.ylabel("Input 2")
    plt.show()
except ImportError:
    print("Matplotlib not installed. Skipping decision boundary plot.")
